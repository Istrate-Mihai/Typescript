TS Type System:
- used to catch errors
- write type annotations
- active during environment
- doesn't provide performance optimization

Typescript code -> TS Compiler -> JS code

npm install -g typescript ts-node
tsc --help

vs code Setup:

file > preferences > settings

npm init -y
npm install axios

Helps with typo on object properties.
Helps keep track of errors when passing arguments to functions.

Syntax + Features
Design Patterns with TS

Type: easy way to refer to the different properties + functions that a value has.

Primitive types:
number, boolean, void, undefined
string, symbol, null

Object types:
functions, arrays, classes, objects

Type annotations and inference:
variables, functions, objects.

let <varName>: <type> = <value>;

For object types:
• arrays: <type>[]
• classes: ClassName
• object literal: {propName: typeOfProp}
• functions: (param: paramType) => returnValue

Variable declaration + initialization => TS will infer the type otherwise => type is any.
Rely on type annotations:
• when a function returns the any type
ex: JSON.parse();
• when we declare the variable on one line and initialize it later.
• when the variable's type can not be inferred correctly, we want to express an or logic with our types.

Type annotations for functions:
Type inference is done only for returned values to functions based on a returned value inside the body of the function.
Functions have the return type of void if they don't return nothing or never if they don't reach the end (example: have an error thrown).

Bidimensional arrays:
const arr: string[][]; -> array of string arrays.

Multiple types array:
const arr: (<type1> | <type2>) = ...;
